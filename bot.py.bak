#!/usr/bin/env python3
import os
import sys
import json
import pickle
import random
import logging
import sqlite3
import time

from datetime import datetime, timedelta
from urllib.parse import urlparse, quote_plus

import requests
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import smtplib
from email.mime.text import MIMEText

# ─────────────────────────────────────────────────────────────────────────────
#    CONFIG & PATHS
# ─────────────────────────────────────────────────────────────────────────────
HERE       = os.path.dirname(__file__)
CONFIG     = os.path.join(HERE, "config.json")
COOKIES    = os.path.join(HERE, "cookies.pkl")
SEEN_DB    = os.path.join(HERE, "seen.db")
SERVICE_ACCT = os.path.join(HERE, "service_account.json")

# ─────────────────────────────────────────────────────────────────────────────
#    LOGGER
# ─────────────────────────────────────────────────────────────────────────────
LOG_FMT = "%(asctime)s  %(levelname)-5s  %(message)s"
logging.basicConfig(level=logging.INFO, format=LOG_FMT)
log = logging.getLogger(__name__)

# ─────────────────────────────────────────────────────────────────────────────
#    UTILITIES
# ─────────────────────────────────────────────────────────────────────────────
def load_config():
    if not os.path.exists(CONFIG):
        log.error(f"{CONFIG} not found.")
        sys.exit(1)
    with open(CONFIG) as f:
        return json.load(f)

def build_session(cfg):
    sess = requests.Session()
    # --- load cookies so Zillow trusts us
    if os.path.exists(COOKIES):
        with open(COOKIES, "rb") as f:
            for ck in pickle.load(f):
                sess.cookies.set(ck["name"], ck["value"],
                                 domain=ck.get("domain"),
                                 path=ck.get("path"))
    # --- random User-Agent
    ua = random.choice(cfg.get("user_agents", ["Mozilla/5.0"]))
    sess.headers.update({
        "User-Agent": ua,
        "Accept": "application/json, text/plain, */*",
        "Referer": cfg["zillow_url"]
    })
    return sess

def init_db():
    conn = sqlite3.connect(SEEN_DB)
    conn.execute("CREATE TABLE IF NOT EXISTS seen(id TEXT PRIMARY KEY)")
    conn.commit()
    return conn

def init_sheet(cfg):
    creds = ServiceAccountCredentials.from_json_keyfile_name(
        SERVICE_ACCT,
        ["https://spreadsheets.google.com/feeds",
         "https://www.googleapis.com/auth/drive"]
    )
    client = gspread.authorize(creds)
    return client.open_by_key(cfg["sheet_id"]).worksheet(cfg["sheet_tab"])

def send_email(cfg, new_listings):
    user = os.environ.get("EMAIL_USER")
    pwd  = os.environ.get("EMAIL_PASS")
    msg  = MIMEText("\n".join(
        f"{l['address']} → {l['url']}" for l in new_listings
    ))
    msg["Subject"] = f"[Zillow] {len(new_listings)} New Short-Sales"
    msg["From"]    = cfg["email_from"]
    msg["To"]      = cfg["email_to"]

    s = smtplib.SMTP(cfg["smtp_host"], cfg["smtp_port"])
    s.starttls()
    s.login(user, pwd)
    s.send_message(msg)
    s.quit()

def send_sms(cfg, new_listings):
    api_key = os.environ.get("SMS_API_KEY")
    to_num  = cfg["sms_to"]
    for l in new_listings:
        body = f"New: {l['address']} – {l['url']}"
        requests.post(
            "https://api.smsmobile.com/send",
            json={"api_key": api_key, "to": to_num, "message": body},
            timeout=10
        )

# ─────────────────────────────────────────────────────────────────────────────
#    CORE POLL
# ─────────────────────────────────────────────────────────────────────────────
def poll_once(cfg):
    sess   = build_session(cfg)
    # extract the query string out of the configured Zillow URL:
    parsed = urlparse(cfg["zillow_url"])
    qs     = parsed.query  # e.g. "searchQueryState=…"
    wants  = {"cat1": ["mapResults"]}
    api_url = (
        "https://www.zillow.com/search/GetSearchPageState.htm?"
        f"{qs}&wants={quote_plus(json.dumps(wants))}&requestId=1"
    )

    log.info("Fetching Zillow JSON…")
    resp = sess.get(api_url, timeout=30)
    resp.raise_for_status()
    data = resp.json()

    # grab the listings:
    listings = data["cat1"]["mapResults"]

    conn  = init_db()
    sheet = init_sheet(cfg)
    new_items = []

    for item in listings:
        zpid = str(item["zpid"])
        cur  = conn.execute("SELECT 1 FROM seen WHERE id=?", (zpid,))
        if cur.fetchone():
            continue

        conn.execute("INSERT INTO seen(id) VALUES(?)", (zpid,))
        conn.commit()

        address = item.get("addressStreet", "").strip()
        price   = item.get("unformattedPrice", "")
        beds    = item.get("bedrooms", "")
        baths   = item.get("bathrooms", "")
        url     = "https://www.zillow.com" + item.get("detailUrl", "")

        # append to Google Sheet:
        row = [datetime.now().isoformat(), price, beds, baths, address, url]
        sheet.append_row(row)

        new_items.append({"address": address, "url": url})

    conn.close()

    # notify if needed
    if new_items:
        if cfg.get("email_enabled"):
            log.info("Sending email…")
            send_email(cfg, new_items)
        if cfg.get("sms_enabled"):
            log.info("Sending SMS…")
            send_sms(cfg, new_items)

    return new_items

# ─────────────────────────────────────────────────────────────────────────────
#    MAIN LOOP
# ─────────────────────────────────────────────────────────────────────────────
def main():
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument("--once",  action="store_true")
    parser.add_argument("--debug", action="store_true")
    args = parser.parse_args()

    cfg = load_config()
    if args.debug:
        log.setLevel(logging.DEBUG)

    if args.once:
        log.info("** One-off run **")
        new = poll_once(cfg)
        log.info(f"Done; found {len(new)} new listings.")
        return

    log.info("** Starting continuous polling **")
    while True:
        try:
            new = poll_once(cfg)
            log.info(f"Sleeping {cfg['poll_interval_min']} minutes until next run.")
        except Exception as e:
            log.error("Error during poll:", exc_info=e)

        # randomized interval
        base    = cfg.get("poll_interval_min", 60)
        delta   = random.randint(-5, +5)
        wait_m  = max(1, base + delta)
        next_tm = (datetime.now() + timedelta(minutes=wait_m))\
                  .strftime("%I:%M %p")
        log.info(f"→ Next run at {next_tm} (in {wait_m} min)")
        time.sleep(wait_m * 60)

if __name__ == "__main__":
    main()

